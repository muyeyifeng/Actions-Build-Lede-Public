#
# This is free software, lisence use MIT.
# 

name: OpenWrt-Debug

on:
  push:
    branches: 
      - main
    paths-ignore:
      - "*.md"
      - "md5"
      - ".github/openwrt-ci-all-in-one-old.yml"
  schedule:
    - cron: 30 18 * * 0/3

env:
  action_state: run
  GITHUB_EMAIL: muyeyifeng@gmail.com	#email
  GITHUB_USER: muyeyifeng

  #选择是否编译docker
  #需补充容器托管端用户信息
  #以下为Ali云镜像托管服务
  Build_Docker: true
  Push_Dockerhub: true
  Push_Aliyun: true
  #hub.docker.com用户
  HUBDOCKER_REGISTRY_USERNAME: muyeyifeng
  DOCKER_REGISTRY_USERNAME: muyeyifeng@163.com
  DOCKER_REGISTRY_HOST: registry.cn-beijing.aliyuncs.com
  DOCKER_REGISTRY_URL: registry.cn-beijing.aliyuncs.com/muyeyifeng/

jobs:

  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        db-backend: [rpi2-3-4, rpi364, rpi464, aarch64, x64]	# 平台分配

    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: main
          fetch-depth: 1000000

      - name: Clone source code
        run:  |
          git clone https://github.com/coolsnowwolf/lede
          git clone https://github.com/muyeyifeng/Clone-Lean-lede
          mv Clone-Lean-lede/dl lede/

      - name: Show Last md5
        run:  |
          cat md5 | tail -n 1 |awk '{print $1}'

      - name: Check MD5
        run:  |
          cd lede
          git log -1 --format=%cd
          echo -n "$(git log -1 --format=%cd)" |md5sum
          echo -n "$(git log -1 --format=%cd)" |md5sum > tmpmd5
          if [[ "$(cat ../md5 | tail -n 1 |awk '{print $1}')" == "$(cat tmpmd5| tail -n 1 |awk '{print $1}')" ]]; then
                  echo "action_state=cancel" >> $GITHUB_ENV
          else
                  echo -n "$(git log -1 --format=%cd)" |md5sum >> ../md5
          fi

      - name: Set platform names
        if: ${{ env.action_state == 'run' ||  github.event_name == 'push' }}
        run: |
          case ${{ matrix.db-backend }} in
          "aarch64") echo "path=armvirt/64/openwrt-armvirt-64" >> $GITHUB_ENV&&echo "arch=arm64v8" >> $GITHUB_ENV;;
          "rpi2-3-4") echo "path=bcm27xx/bcm2709/openwrt-bcm27xx-bcm2709-rpi-2" >> $GITHUB_ENV&&echo "arch=arm32v7" >> $GITHUB_ENV;;
          "rpi364") echo "path=bcm27xx/bcm2710/openwrt-bcm27xx-bcm2710-rpi-3" >> $GITHUB_ENV&&echo "arch=arm64v8" >> $GITHUB_ENV;;
          "rpi464") echo "path=bcm27xx/bcm2711/openwrt-bcm27xx-bcm2711-rpi-4" >> $GITHUB_ENV&&echo "arch=arm64v8" >> $GITHUB_ENV;;
          "x64") echo "path=x86/64/openwrt-x86-64-generic" >> $GITHUB_ENV&&echo "arch=amd64" >> $GITHUB_ENV;;
          *) echo "impossible";;
          esac

      - name: Check env
        run: |
          echo ${{ env.action_state }}
          echo ${{ github.event_name }}
          echo ${{ env.path }}
          echo ${{ env.Push_Dockerhub }}
          echo ${{ env.Push_Aliyun }}
          echo ${{ env.Build_Docker }}
          echo ${{ env.arch }}

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        if: ${{ env.action_state == 'run' ||  github.event_name == 'push' }}
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get upgrade -y
          #==================================
          #用readme中指令安装需要的软件
          echo "$(cat ./lede/README.md |grep 'sudo apt-get' | sed -n 2p)"
          $(cat ./lede/README.md |grep "sudo apt-get" | sed -n 2p)
          sudo -E apt-get -y install tree
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y upgrade
          sudo -E apt-get clean
          df -h

      - name: Update feeds
        if: ${{ env.action_state == 'run' ||  github.event_name == 'push' }}
        run: |
          cp ./feeds.conf.default ./lede/feeds.conf.default
          cd lede
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        if: ${{ env.action_state == 'run' ||  github.event_name == 'push' }}
        run: |
          cp ${{ matrix.db-backend }}.defconfig lede/defconfig
          cd lede
          ls
          cat defconfig > .config
          make defconfig
          cat .config

      - name: Make download
        if: ${{ env.action_state == 'run' ||  github.event_name == 'push' }}
        run: |
          ls
          cd lede
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        if: ${{ env.action_state == 'run' ||  github.event_name == 'push' }}
        run: |
          ls
          cd lede
          make -j$(nproc) || make -j1 V=s
          echo "========================"
          echo "Space usage:"
          echo "========================"
          df -h
          echo "========================"
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Upload artifact targets
        if: ${{ env.action_state == 'run' ||  github.event_name == 'push' }}
        uses: actions/upload-artifact@main
        with:
          name: OPENWRT-${{ matrix.db-backend }}-targets
          path: ./lede/bin/targets/

      - name: Upload artifact packages
        if: ${{ env.action_state == 'run' ||  github.event_name == 'push' }}
        uses: actions/upload-artifact@main
        with:
          name: OPENWRT-${{ matrix.db-backend }}-packages
          path: ./lede/bin/packages/

      - name: openwrt-x86-64-generic-ext4-combined.img
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && matrix.db-backend =='x64' }}
        uses: actions/upload-artifact@main
        with:
          name: openwrt-x86-64-generic-ext4-combined.img
          path: ./lede/bin/targets/${{ env.path }}-ext4-combined.img

      - name: openwrt-x86-64-generic-ext4-combined.vmdk
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && matrix.db-backend =='x64' }}
        uses: actions/upload-artifact@main
        with:
          name: openwrt-x86-64-generic-ext4-combined.vmdk
          path: ./lede/bin/targets/${{ env.path }}-ext4-combined.vmdk

      - name: openwrt-x86-64-generic-ext4-combined-efi.img
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && matrix.db-backend =='x64' }}
        uses: actions/upload-artifact@main
        with:
          name: openwrt-x86-64-generic-ext4-combined-efi.img
          path: ./lede/bin/targets/${{ env.path }}-ext4-combined-efi.img

      - name: openwrt-x86-64-generic-ext4-combined-efi.vmdk
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && matrix.db-backend =='x64' }}
        uses: actions/upload-artifact@main
        with:
          name: openwrt-x86-64-generic-ext4-combined-efi.vmdk
          path: ./lede/bin/targets/${{ env.path }}-ext4-combined-efi.vmdk

      - name: openwrt-bcm27xx-bcm2709-rpi-2-ext4-factory.img.gz
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && matrix.db-backend =='rpi2-3-4' }}
        uses: actions/upload-artifact@main
        with:
          name: openwrt-bcm27xx-bcm2709-rpi-2-ext4-factory.img.gz
          path: ./lede/bin/targets/${{ env.path }}-ext4-factory.img.gz

      - name: openwrt-bcm27xx-bcm2710-rpi-3-ext4-factory.img.gz
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && matrix.db-backend =='rpi364' }}
        uses: actions/upload-artifact@main
        with:
          name: openwrt-bcm27xx-bcm2710-rpi-3-ext4-factory.img.gz
          path: ./lede/bin/targets/${{ env.path }}-ext4-factory.img.gz

      - name: openwrt-bcm27xx-bcm2711-rpi-4-ext4-factory.img.gz
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && matrix.db-backend =='rpi464' }}
        uses: actions/upload-artifact@main
        with:
          name: openwrt-bcm27xx-bcm2711-rpi-4-ext4-factory.img.gz
          path: ./lede/bin/targets/${{ env.path }}-ext4-factory.img.gz

      - name: openwrt-armvirt-64-default-rootfs.tar.gz
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && matrix.db-backend =='aarch64' }}
        uses: actions/upload-artifact@main
        with:
          name: openwrt-armvirt-64-default-rootfs.tar.gz
          path: ./lede/bin/targets/${{ env.path }}-default-rootfs.tar.gz

      - name: Build DockerImage
        if: ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && env.Build_Docker }}
        run: |
          mkdir docker-build
          echo "======================="
          path=$( find -type f -name "*rootfs.tar.gz" )
          name=$( find -type f -name "*rootfs.tar.gz" |sed 's#.*/##' )
          echo $path
          echo "======================="
          mv $path docker-build/
          cd docker-build
          cat << EOF >Dockerfile
          FROM scratch
          ADD $name /
          USER root
          CMD /sbin/init
          EOF
          cat Dockerfile
          docker build -f ./Dockerfile -t lede-${{ matrix.db-backend }}:$(date +%Y%m%d%H%M%S) --build-arg ARCH=${{ env.arch }}/ .

      - name: Tag DockerImage
        if:  ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && env.Build_Docker }}
        run: |
         echo "============================="
         sudo docker images
         echo "============================="
         ImageId=$(sudo docker images | grep "lede" | awk '{print $3}')
         echo "============================="
         echo $ImageId
         echo "============================="

         tag=$(date +%Y%m%d%H%M%S)
         echo "tag=$tag" >> $GITHUB_ENV
         sudo docker tag $ImageId $DOCKER_REGISTRY_URL"lede-"${{ matrix.db-backend }}:latest
         sudo docker tag $ImageId $DOCKER_REGISTRY_URL"lede-"${{ matrix.db-backend }}:$tag
         sudo docker tag $ImageId muyeyifeng/lede-${{ matrix.db-backend }}:latest
         sudo docker tag $ImageId muyeyifeng/lede-${{ matrix.db-backend }}:$tag

      - name: Push DockerHub DockerImage
        if:  ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && env.Build_Docker == 'true' && env.Push_Dockerhub == 'true'  }}
        run: |
         #push hub.docker.com
         sudo docker login --username=$HUBDOCKER_REGISTRY_USERNAME --password=${{ secrets.HUBDOCKER_KEY }} 
         sudo docker push muyeyifeng/lede-${{ matrix.db-backend }}:latest
         sudo docker push muyeyifeng/lede-${{ matrix.db-backend }}:${{ env.tag }}

      - name: Push this source
        if: ${{ env.action_state == 'run' &&  matrix.db-backend == 'rpi2-3-4' }}
        run: |
          rm -rf lede docker-build
          echo "${{ secrets.GHB_KEY }}" >github.pem
          eval `ssh-agent`
          chmod 600 github.pem
          ssh-add github.pem
          mkdir -p ~/.ssh/
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
          ls
          echo "============ git config ============"
          git config --global user.email ${GITHUB_EMAIL}
          git config --global user.name ${GITHUB_USER}
          echo "============ git commit ============"
          rm -rf github.pem
          if( ${{ github.event_name == 'push' }} );then
            git add -f .
            git commit --no-verify -m "Update md5" 
          else
            git add .
            git commit -m "Update md5" 
          fi
          echo "============ git push ============"
          git push

      - name: Add Aliyun Docker Accelerator
        if:  ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && env.Build_Docker == 'true' && env.Push_Aliyun == 'true' }}
        run: |
         sudo mkdir -p /etc/docker
         sudo tee /etc/docker/daemon.json <<-'EOF'
         {
           "registry-mirrors": ["${{ secrets.ALIACCELERATOR }}"]
         }
         EOF
         sudo systemctl daemon-reload
         sudo systemctl restart docker 

      - name: Push Aliyun DockerImage
        if:  ${{ ( env.action_state == 'run' || github.event_name == 'push' ) && env.Build_Docker == 'true' && env.Push_Aliyun == 'true' }}
        run: |
         #push Aliyun
         sudo docker login --username=$DOCKER_REGISTRY_USERNAME --password=${{ secrets.ALIDOCKER_KEY }}  $DOCKER_REGISTRY_HOST
         sudo docker push $DOCKER_REGISTRY_URL"lede-"${{ matrix.db-backend }}:latest
         sudo docker push $DOCKER_REGISTRY_URL"lede-"${{ matrix.db-backend }}:${{ env.tag }}
